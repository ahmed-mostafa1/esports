love it — here’s a **complete, code-free blueprint** to build your **custom Laravel dashboard** (no Filament), aligned with our locked decisions.

---

# 0) Ground rules (locked)

* **Key scheme:** `page.section.item` (e.g., `home.hero.title`)
* **Texts:** bilingual via **locale** (`en`, `ar`) using a translatable JSON column on one model
* **Images:** **shared** across languages (one file per image key). File name = the image key + extension (e.g., `home.hero.png`)
* **Locale mode:** session-based toggle first (URL prefixes optional later)
* **Editors:** **textareas only** (no WYSIWYG)
* **Phase 2 (optional):** “**page skeleton + modal editor**” UX on top of the same content model

---

# 1) Information architecture

## 1.1 Content inventory & registry

* Make a short, human doc (or JSON config) listing **each page** and its **editable nodes**:

  * Example:

    * `home.hero.title` (text, required)
    * `home.hero.subtitle` (text, optional)
    * `home.hero.image` (image, required, 1600×900 min)
    * `about.header.title` (text)
    * `partners.banner.image` (image)
* This registry will drive:

  * Admin **filters** (by page)
  * The **page skeleton** hotspots (Phase 2)
  * Validation expectations (required? max chars? min image size?)

## 1.2 Data model (single table “contents”)

* **Fields**

  * `key` (`unique`, string; `page.section.item`)
  * `group` (page name; e.g., `home`, `about`, `partners`)
  * `type` (`text` or `image`)
  * `value` (JSON)

    * For **text**: `{ "en": "...", "ar": "..." }`
      (AR can be empty → fallback to EN on read)
    * For **image**: `{ "path": "home.hero.png" }` (shared filename only)
  * timestamps
* **Indices**: `group`, `type` for admin filters

## 1.3 File storage layout (images)

* Publicly readable folder for shared images:

  * **Option A (simple):** `public/content-images/<filename>`
  * **Option B (storage disk):** `storage/app/public/content-images/<filename>` (with `storage:link`)
* **Naming rule:** filename must equal **the image key** + correct extension (e.g., `home.hero.png`)

---

# 2) Localization & RTL

## 2.1 Locale toggle

* Session-based `GET /lang/{en|ar}` sets session locale and redirects `back()`
* In main layout: `<html dir="rtl" | "ltr">` based on locale
* Add small AR typographic tweaks if needed (font, line-height, spacing)

## 2.2 Optional Phase later: URL prefixes

* Route groups for `/en/*` and `/ar/*`
* Add `hreflang` link tags, localized sitemaps

---

# 3) Admin area (custom)

## 3.1 Routing & access

* Prefix: `/admin`
* Middleware: `auth` + `can:manage-content` (or a simple role check)
* Pages:

  * `GET /admin` → dashboard home (page filter + quick links)
  * `GET /admin/contents` → list (search by key, filter by page/type)
  * `GET /admin/contents/{key}` → edit form (text or image)
  * `POST /admin/contents/{key}` → update (with validation)
  * **Phase 2:** `GET /admin/pages/{page}` → **page skeleton** view; modals open per node

## 3.2 Controllers (thin)

* `Admin\ContentController`

  * `index()` → list with filters (`group`, `type`, search by key)
  * `edit($key)` → resolve model by key, load form config (labels, help text) from registry
  * `update($key)` → validate & persist
* Optional: `Admin\PageController` for the skeleton UI per page

## 3.3 Policies/guards

* Gate: `manage-content` for your admin users
* (Optional) Use a role like `content-editor`; attach to users

---

# 4) Admin UI/UX

## 4.1 MVP: List + form

* **List**

  * Filters: **Page (group)** and **Type**
  * Columns: `key`, `type`, `group`, `updated_at`
  * Search box for `key` (substring)
* **Form**

  * Fields:

    * `key` (read-only)
    * `page` (read-only or auto)
    * `type` (read-only or auto)
    * If **text**: two textareas: **EN** and **AR** (labels localized)

      * Show current locale badge; provide a preview button (optional)
      * **Validation UX**: EN required; AR optional (but recommended)
    * If **image**: single file input (drag/drop) + preview

      * Show the expected file name (the key + `.{png|jpg|webp}`)
      * Help text: recommended dimensions/size, format
* **Actions**

  * Save, Cancel
  * (Optional) Save & Stay / Save & Back
  * (Optional) Clear cache for this key after save (see Caching)

## 4.2 Phase 2: Page skeleton + modal editor

* **Page selector** drop-down: Home / About / Partners
* **Static skeleton** rendering:

  * Either a **wireframe** (boxes with labels) or a **thumbnail** image of the page
  * Overlay **hotspots** matching nodes from registry
* **Click hotspot → modal**:

  * Modal title = Node label (e.g., “Hero section”)
  * Tabs (if text): EN / AR (textareas)
  * If image: preview + upload
  * Save with validation, toast feedback
* **Unsaved changes guard** on close
* **Variant**: also allow direct keyboard navigation across nodes (↑/↓) for fast edits

---

# 5) Validation & rules

## 5.1 Text

* EN required, AR optional (configurable per key)
* Max lengths per field (from registry): e.g., title 120 chars, subtitle 240
* Disallow HTML if you want to keep content safe (pure text)

## 5.2 Image

* Require file for image keys
* Allowed extensions: png/jpg/webp (pick 1–2 preferred formats)
* Enforce **filename = key + extension**:

  * If user uploads a different name, **rename or reject** with a clear message
* Validate image dimensions (min width/height) and file size

---

# 6) Reading content on the frontend

## 6.1 Text accessor

* Read by key, return:

  * value for **current locale**
  * **fallback to EN** if AR missing or blank
  * if both missing → developer default (second param)

## 6.2 Image accessor

* Read `value.path` from DB (e.g., `home.hero.png`)
* Return a **public URL** to either `/content-images/<filename>` or `/storage/content-images/<filename>` depending on your storage choice
* If missing → fallback image URL (small placeholder)

---

# 7) Caching & invalidation

## 7.1 Strategy

* Cache **per key + locale** for texts and **per key** for images
* TTL (e.g., 5–30 min) or forever + manual busting

## 7.2 Busting

* After admin saves a change:

  * Clear cache for that **key** (both locales for texts)
  * (Optional) global cache bust button in admin

---

# 8) Audit trail & safety (optional but recommended)

* **Activity log:** record who edited which key, old → new values, timestamp
* **Soft lock** (optional): show if someone else has the form open (minimal collision risk for your scope)
* **Backups:** daily DB backup (even a simple mysqldump/Cloud backup is fine)
* **Revisions (optional):** keep a small number of historical versions per key and allow “Revert”

---

# 9) Accessibility & i18n details

* **Labels, help text** in the admin are clear and localized
* Consider **right-aligned** AR textareas in the admin for comfort
* Add `lang` & `dir` attributes in admin modals as well
* Keyboard navigable forms & modals; sufficient contrast; focus states

---

# 10) Testing

## 10.1 Unit/Feature tests

* Read helpers:

  * Returns EN when locale=en
  * Returns AR when locale=ar and AR exists; falls back to EN otherwise
  * Image accessor returns correct URL; fallback when missing
* Update flows:

  * Text updates persist for both locales and reflect on frontend after cache clear
  * Image upload respects renaming rule, preview shows, persists on disk

## 10.2 Manual QA checklist

* Switch EN/AR → hero title/subtitle/paragraph switch correctly
* Replace hero image → frontend updates; responsive sizes OK
* Try invalid image (wrong ext/too big) → clear error shown
* Admin filters work (Home/About/Partners)
* Page skeleton hotspots map to the correct modals (Phase 2)

---

# 11) Deployment & ops notes

* Ensure web root points to `/public`
* Set correct file permissions on `public/` or `storage` for image uploads
* If using `storage` disk: run `php artisan storage:link`
* **CDN (optional):** If you add one later, make its base URL configurable and apply it in the image accessor
* Logging: surface any missing keys or missing files in logs (debug in dev; warning in prod)

---

# 12) Rollout plan

1. **Finalize registry** for Home/About/Partners (keys + rules)
2. **Seed initial rows** (copy EN from site; AR = EN placeholder)
3. Build **Admin MVP**:

   * List (filters), Edit form (text EN/AR & image)
   * Auth/guard; basic validations; cache clear on save
4. **Wire Home** with content accessors for 6–10 key spots; verify EN/AR + images
5. Wire **About & Partners**
6. Client review & minor fixes
7. **Phase 2 (optional)**: page skeleton + modal editor for Home; then About/Partners
8. (Optional) SEO pass with URL prefixes + sitemaps
9. (Optional) Activity log + revisions

---

# 13) Risks & mitigations

* **Editors change keys unintentionally** → make `key` read-only; keys are maintained by devs only
* **Design changes break skeleton hotspots** → the registry lives in code; keep it current after layout changes
* **Image bloat** → enforce size/dimensions; consider WebP; optionally run an optimizer job
* **RTL surprises** → audit spacing/overflow; add AR-specific CSS utilities where needed

---

If you’re happy with this plan, say “**go**” and I’ll translate it into a **short execution checklist** (still no code) so you can knock it out step by step.
